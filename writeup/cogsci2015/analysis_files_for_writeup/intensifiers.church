(define alpha 5)

(define distribution 'peaked-mid)

(define (power lst alpha) (map (lambda (x) (expt x alpha)) lst))

(define (seq start distance end)
  (if (> (+ start distance) end) (list start)
      (append (list start) (seq (+ start distance) distance end))))

(define (theta-prior)
  (uniform-draw (seq 0 0.25 1)))

(define (extr-prior)
  (uniform-draw '(0 0.25 0.5)))

(define (height-prior)
  (multinomial
   '(0.00 1.00 0.25 0.50 0.75)
   (case distribution
          (('peaked-both) '(0.27272727 0.27272727 0.18181818 0.09090909 0.18181818))
          (('peaked-mid) '(0.02192964 0.02192964 0.22851215 0.49911642 0.22851215))
          (else (lambda () (display "error 0: that's not a valid distribution"))))))

(define (meaning utterance)
  (case utterance
        (('none) #t)
        (('tall) '(scalar height theta-tall 'above eps-default))
        (('short) '(scalar height theta-short 'below eps-default))
        (('very-tall) '(scalar height theta-tall 'above theta-very))
        (('very-short) '(scalar height theta-short 'below theta-very))
        (('extremely-tall) '(scalar height theta-tall 'above theta-extremely))
        (('extremely-short) '(scalar height theta-short 'below theta-extremely))
        ))

(define (scalar value theta direction amount)
  (if (equal? direction 'above)
    (>= (- value theta) amount)
    (>= (- theta value) amount)))

(define utterances '(none tall short very-tall very-short extremely-tall extremely-short
  ))
(define costs '(0 1 1 2 2 10 10
  ))

(define (utterance-prior)
  (multinomial utterances
               (map (lambda (utterance-cost) (exp (- utterance-cost)))
                    costs)))

(define literal-listener
  (mem
   (lambda (utterance theta-tall theta-short theta-very theta-extremely eps-default
     )
     (enumeration-query
      (define height (height-prior))
      height
      (eval (meaning utterance))))))

(define speaker
  (mem
   (lambda (knowledge theta-tall theta-short theta-very theta-extremely eps-default
           )
     (enumeration-query
      (define utterance (utterance-prior))
      (define interpretation
        (apply multinomial
               (list (first (literal-listener utterance theta-tall theta-short theta-very theta-extremely eps-default
                            ))
                     (power (second (literal-listener utterance theta-tall theta-short theta-very theta-extremely eps-default
                                    )) alpha))))
      utterance
      (equal? interpretation knowledge)))))

(define pragmatic-listener
  (mem
   (lambda (utterance)
     (enumeration-query
      (define theta-tall (theta-prior))
      (define theta-short (theta-prior))
      (define eps-default (extr-prior))
      (define theta-very (extr-prior))
      (define theta-extremely (extr-prior))
      (define height (height-prior))
      height
      (equal? (apply multinomial (speaker height theta-tall theta-short theta-very theta-extremely eps-default
                                 )) utterance)))))

(display (pragmatic-listener 'none))
(display (pragmatic-listener 'tall))
(display (pragmatic-listener 'short))
(display (pragmatic-listener 'very-tall))
(display (pragmatic-listener 'very-short))
(display (pragmatic-listener 'extremely-tall))
(display (pragmatic-listener 'extremely-short))
